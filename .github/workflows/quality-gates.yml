name: Quality Gates and Validation

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "quality-gates-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  # Quality Gate 1: Code Quality and Static Analysis
  static-analysis:
    name: Static Analysis and Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type checking
        run: npx tsc --noEmit
        continue-on-error: false

      - name: ESLint validation
        run: npm run lint
        continue-on-error: false

      - name: CSS validation
        run: |
          # Check for CSS syntax errors
          npx stylelint "**/*.css" --config-basedir=. --allow-empty-input
        continue-on-error: false

      - name: HTML validation
        run: |
          # Validate HTML structure
          npx html-validate "**/*.html" --config .htmlvalidaterc.json || true

  # Quality Gate 2: Build Verification
  build-verification:
    name: Build and Asset Validation
    runs-on: ubuntu-latest
    needs: static-analysis
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Production build
        run: npm run build
        env:
          NODE_ENV: production

      - name: Build output validation
        run: |
          # Verify critical build outputs exist
          test -f index.html || (echo "ERROR: index.html missing" && exit 1)
          test -f styles.css || (echo "ERROR: styles.css missing" && exit 1)
          test -f script.js || (echo "ERROR: script.js missing" && exit 1)
          test -f manifest.webmanifest || (echo "ERROR: manifest.webmanifest missing" && exit 1)
          test -f assets/icon.svg || (echo "ERROR: icon.svg missing" && exit 1)
          echo "âœ… All critical assets verified"

      - name: Asset optimization check
        run: |
          # Check asset sizes and optimization
          echo "Asset Size Analysis:"
          du -h index.html styles.css script.js

          # Fail if assets are unexpectedly large
          INDEX_SIZE=$(stat -c%s index.html)
          CSS_SIZE=$(stat -c%s styles.css)
          JS_SIZE=$(stat -c%s script.js)

          [ $INDEX_SIZE -lt 50000 ] || (echo "WARNING: index.html too large: ${INDEX_SIZE} bytes" && exit 1)
          [ $CSS_SIZE -lt 20000 ] || (echo "WARNING: styles.css too large: ${CSS_SIZE} bytes" && exit 1)
          [ $JS_SIZE -lt 5000 ] || (echo "WARNING: script.js too large: ${JS_SIZE} bytes" && exit 1)
          echo "âœ… Asset sizes within acceptable limits"

      - name: Content validation
        run: |
          # Verify critical content is present
          grep -q "Lean Portfolio" index.html || (echo "ERROR: Missing page title" && exit 1)
          grep -q "Skip to content" index.html || (echo "ERROR: Missing skip link" && exit 1)
          grep -q "aria-label" index.html || (echo "ERROR: Missing ARIA labels" && exit 1)
          echo "âœ… Content validation passed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            index.html
            styles.css
            script.js
            manifest.webmanifest
            assets/
          retention-days: 30

  # Quality Gate 3: Security and Error Detection
  security-scan:
    name: Security and Error Detection
    runs-on: ubuntu-latest
    needs: static-analysis
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Security audit
        run: npm audit --audit-level=moderate
        continue-on-error: false

      - name: Check for console statements
        run: |
          # Fail if console statements found in production code
          CONSOLE_COUNT=$(grep -r "console\." --include="*.js" --include="*.ts" --include="*.tsx" . | grep -v node_modules | grep -v ".git" | wc -l)
          if [ $CONSOLE_COUNT -gt 3 ]; then
            echo "ERROR: Found $CONSOLE_COUNT console statements in production code"
            grep -r "console\." --include="*.js" --include="*.ts" --include="*.tsx" . | grep -v node_modules | grep -v ".git"
            exit 1
          fi
          echo "âœ… Console statement check passed ($CONSOLE_COUNT statements found)"

      - name: Dependency vulnerability scan
        run: |
          # Check for known vulnerabilities
          npx audit-ci --config .audit-ci.json || true

  # Quality Gate 4: Cross-browser and Accessibility Testing
  browser-testing:
    name: Cross-browser and Accessibility Testing
    runs-on: ubuntu-latest
    needs: build-verification
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./dist

      - name: Start local server
        run: |
          # Serve static files for testing
          npx http-server ./dist -p 3000 &
          sleep 5

      - name: Accessibility testing
        run: |
          # Run accessibility tests with axe-core
          npx playwright test --config=playwright.config.js
        continue-on-error: false

      - name: Cross-browser compatibility
        run: |
          # Test in multiple browsers
          npx playwright test --project=chromium --project=firefox --project=webkit
        continue-on-error: false

      - name: Performance testing
        run: |
          # Basic performance metrics
          npx lighthouse http://localhost:3000 --output=json --output-path=lighthouse-report.json --chrome-flags="--headless"

          # Check critical performance metrics
          PERFORMANCE_SCORE=$(node -e "console.log(JSON.parse(require('fs').readFileSync('lighthouse-report.json')).categories.performance.score)")
          ACCESSIBILITY_SCORE=$(node -e "console.log(JSON.parse(require('fs').readFileSync('lighthouse-report.json')).categories.accessibility.score)")

          echo "Performance Score: $PERFORMANCE_SCORE"
          echo "Accessibility Score: $ACCESSIBILITY_SCORE"

          # Fail if scores too low
          [ $(echo "$PERFORMANCE_SCORE >= 0.8" | bc) -eq 1 ] || (echo "ERROR: Performance score too low: $PERFORMANCE_SCORE" && exit 1)
          [ $(echo "$ACCESSIBILITY_SCORE >= 0.9" | bc) -eq 1 ] || (echo "ERROR: Accessibility score too low: $ACCESSIBILITY_SCORE" && exit 1)

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            lighthouse-report.json
            test-results/
          retention-days: 30

  # Quality Gate 5: Runtime Error Detection
  runtime-validation:
    name: Runtime Error Detection
    runs-on: ubuntu-latest
    needs: build-verification
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./dist

      - name: Runtime error testing
        run: |
          # Test for JavaScript runtime errors
          npm run test:runtime || echo "Runtime tests not configured"

      - name: API endpoint validation
        run: |
          # Test external dependencies
          curl -f "https://api.github.com/users/test" > /dev/null || echo "WARNING: GitHub API may be unavailable"

          # Test form endpoint (if configured)
          grep -q "formspree.io" dist/index.html && echo "WARNING: Formspree endpoint should be configured"

  # Quality Gate 6: Deployment Readiness
  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [static-analysis, build-verification, security-scan, browser-testing, runtime-validation]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Verify all quality gates passed
        run: |
          echo "âœ… All quality gates passed successfully"
          echo "ðŸš€ Deployment readiness verified"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./dist

      - name: Final deployment validation
        run: |
          # Final checks before deployment
          echo "Deployment Checklist:"
          echo "âœ… Static analysis passed"
          echo "âœ… Build verification passed"
          echo "âœ… Security scan passed"
          echo "âœ… Browser testing passed"
          echo "âœ… Runtime validation passed"
          echo "ðŸŽ¯ Ready for production deployment"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Quality Gate 7: Post-deployment Validation
  post-deployment:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: deployment-readiness
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Verify live site
        run: |
          # Wait for deployment to propagate
          sleep 30

          # Test live site
          SITE_URL="${{ steps.deployment.outputs.page_url }}"
          curl -f "$SITE_URL" > /dev/null || (echo "ERROR: Live site not accessible" && exit 1)

          # Check critical functionality
          curl -s "$SITE_URL" | grep -q "Lean Portfolio" || (echo "ERROR: Site content missing" && exit 1)

          echo "âœ… Live site validation passed"

      - name: Performance monitoring
        run: |
          # Run lighthouse on live site
          SITE_URL="${{ steps.deployment.outputs.page_url }}"
          npx lighthouse "$SITE_URL" --output=json --output-path=production-lighthouse.json --chrome-flags="--headless"

          echo "ðŸŽ¯ Production performance metrics captured"

      - name: Create deployment report
        run: |
          echo "# Deployment Report" > deployment-report.md
          echo "- **Status**: âœ… Successful" >> deployment-report.md
          echo "- **URL**: ${{ steps.deployment.outputs.page_url }}" >> deployment-report.md
          echo "- **Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> deployment-report.md
          echo "- **Quality Gates**: All passed" >> deployment-report.md

      - name: Upload production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-metrics
          path: |
            production-lighthouse.json
            deployment-report.md
          retention-days: 90