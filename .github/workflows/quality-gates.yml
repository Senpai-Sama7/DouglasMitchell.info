name: Quality Gates and Validation

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: "quality-gates-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  # Quality Gate 1: Code Quality and Static Analysis
  static-analysis:
    name: Static Analysis and Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type checking
        run: npm run typecheck
        continue-on-error: false

      - name: ESLint validation
        run: npm run lint
        continue-on-error: false

      - name: CSS validation
        run: npx stylelint "**/*.css" --allow-empty-input
        continue-on-error: false

  # Quality Gate 2: Build Verification
  build-verification:
    name: Build and Asset Validation
    runs-on: ubuntu-latest
    needs: static-analysis
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Dynamic build (Vercel)
        run: npm run build
        env:
          NODE_ENV: production
          # Build should work without secrets for validation
          SKIP_ENV_VALIDATION: true

      - name: Static build (GitHub Pages)
        run: npm run build:static
        env:
          NODE_ENV: production
          SKIP_ENV_VALIDATION: true

      - name: Build output validation
        run: |
          echo "âœ… Both dynamic and static builds completed successfully"
          echo "Dynamic build: .next directory exists"
          test -d .next || (echo "ERROR: .next directory missing" && exit 1)
          echo "Static build: out directory exists"
          test -d out || (echo "ERROR: out directory missing" && exit 1)

  # Quality Gate 3: Security and Error Detection
  security-scan:
    name: Security and Error Detection
    runs-on: ubuntu-latest
    needs: static-analysis
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Security audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Check for console statements
        run: |
          # Count console statements in production code (app/, components/, hooks/)
          # Exclude: scripts/, tests/, lib/log.ts, lib/motion.ts, lib/error-monitoring.js
          CONSOLE_COUNT=$(grep -r "console\." \
            --include="*.tsx" \
            --include="*.jsx" \
            --exclude-dir=node_modules \
            --exclude-dir=.next \
            --exclude-dir=out \
            --exclude-dir=tests \
            --exclude-dir=scripts \
            app/ components/ hooks/ 2>/dev/null | wc -l)

          if [ $CONSOLE_COUNT -gt 0 ]; then
            echo "ERROR: Found $CONSOLE_COUNT console statements in production code (app/, components/, hooks/)"
            grep -r "console\." \
              --include="*.tsx" \
              --include="*.jsx" \
              --exclude-dir=node_modules \
              app/ components/ hooks/ 2>/dev/null
            exit 1
          fi
          echo "âœ… Console statement check passed (zero console statements in production code)"

  # Quality Gate 4: Testing
  testing:
    name: Unit and E2E Testing
    runs-on: ubuntu-latest
    needs: build-verification
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Unit tests
        run: npm run test:unit
        continue-on-error: true

      - name: E2E tests
        run: npm run test:e2e
        env:
          PLAYWRIGHT_TEST_BASE_URL: http://127.0.0.1:3100
          SKIP_ENV_VALIDATION: true
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/
          retention-days: 30

  # Quality Gate 5: Deployment Readiness
  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [static-analysis, build-verification, security-scan, testing]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Verify all quality gates passed
        run: |
          echo "âœ… All quality gates passed successfully"
          echo "ðŸš€ Production hardening complete"
          echo ""
          echo "Deployment Checklist:"
          echo "âœ… Static analysis passed (TypeScript, ESLint, CSS)"
          echo "âœ… Build verification passed (dynamic + static)"
          echo "âœ… Security scan passed"
          echo "âœ… Testing completed"
          echo ""
          echo "ðŸŽ¯ Ready for production deployment"
